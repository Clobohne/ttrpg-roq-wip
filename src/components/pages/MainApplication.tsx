import React, { useState } from 'react';
import { Box, Button, Input, VStack, Text } from '@chakra-ui/react';
import SimplePeer, { Instance } from 'simple-peer';
import ChatWindow from 'components/pages/ChatWindow';

interface MainApplicationProps {
    role: 'host' | 'player';
}

const MainApplication: React.FC<MainApplicationProps> = ({ role }) => {
    const [peer, setPeer] = useState<Instance | null>(null);
    const [connected, setConnected] = useState(false);
    const [messages, setMessages] = useState<string[]>([]);
    const [localSignal, setLocalSignal] = useState<string>(''); // Signal generated by this peer
    const [remoteSignal, setRemoteSignal] = useState<string>(''); // Signal received from the other peer

    // Utility: Add a log message to the chat window
    const logMessage = (message: string) => {
        setMessages((prev) => [...prev, `[DEBUG] ${message}`]);
    };

    // Initialize WebRTC peer connection
    const initializePeer = (initiator: boolean) => {
        logMessage(`Initializing peer. Role: ${role}, Initiator: ${initiator}`);

        const newPeer = new SimplePeer({
            initiator,
            trickle: false, // Simplify signaling for manual flow
        });

        // Generate local signal
        newPeer.on('signal', (data) => {
            const signalString = JSON.stringify(data);
            setLocalSignal(signalString); // Convert signal to string for sharing
            logMessage(`Local signal generated: ${signalString}`);
        });

        // Handle connection establishment
        newPeer.on('connect', () => {
            setConnected(true);
            logMessage('Peer connection established!');
            setMessages((prev) => [...prev, 'Connected to peer!']);
        });

        // Receive messages
        newPeer.on('data', (data) => {
            setMessages((prev) => [...prev, `Peer: ${data.toString()}`]);
            logMessage(`Received message: ${data.toString()}`);
        });

        newPeer.on('error', (error) => {
            logMessage(`Peer error: ${error.message}`);
        });

        setPeer(newPeer);
    };

    // Apply the remote signal to establish the connection
    const applyRemoteSignal = () => {
        if (!remoteSignal) {
            logMessage('Remote signal is empty. Cannot connect.');
            setMessages((prev) => [...prev, 'Error: Remote signal is empty.']);
            return;
        }
        try {
            logMessage(`Applying remote signal: ${remoteSignal}`);
            peer?.signal(JSON.parse(remoteSignal)); // Apply the remote signal
        } catch (error) {
            logMessage(`Error applying remote signal: ${error.message}`);
            setMessages((prev) => [...prev, 'Error: Invalid remote signal format.']);
        }
    };

    // Send a chat message
    const sendMessage = (message: string) => {
        if (peer && connected) {
            peer.send(message);
            setMessages((prev) => [...prev, `You: ${message}`]);
            logMessage(`Message sent: ${message}`);
        } else {
            logMessage('Message not sent: Not connected to a peer.');
            setMessages((prev) => [...prev, 'Not connected to a peer.']);
        }
    };

    return (
        <Box height="100vh" display="flex" flexDirection="column">
            <VStack spacing={4} padding={4} flex="1" overflow="auto">
                {!connected ? (
                    <>
                        {role === 'host' ? (
                            <>
                                {/* Host Workflow */}
                                <Button colorScheme="blue" onClick={() => initializePeer(true)}>
                                    Start Hosting
                                </Button>
                                {localSignal && (
                                    <Box>
                                        <Text fontSize="sm">Share this signal with the player:</Text>
                                        <Input value={localSignal} isReadOnly bg="gray.200" />
                                    </Box>
                                )}
                            </>
                        ) : (
                            <>
                                {/* Player Workflow */}
                                <Text fontSize="sm">Paste the host's signal:</Text>
                                <Input
                                    placeholder="Enter host's signal"
                                    onChange={(e) => setRemoteSignal(e.target.value)}
                                    bg="gray.200"
                                    value={remoteSignal}
                                />
                                <Button
                                    colorScheme="green"
                                    onClick={() => {
                                        initializePeer(false); // Initialize peer as non-initiator
                                        logMessage('Player initialized, waiting to connect.');
                                    }}
                                >
                                    Join as Player
                                </Button>
                            </>
                        )}

                        {/* Shared: Paste the signal from the other peer */}
                        {peer && (
                            <>
                                <Text fontSize="sm">
                                    Paste the {role === 'host' ? "player's" : "host's"} signal:
                                </Text>
                                <Input
                                    placeholder={`Enter ${role === 'host' ? "player's" : "host's"} signal`}
                                    onChange={(e) => setRemoteSignal(e.target.value)}
                                    bg="gray.200"
                                    value={remoteSignal}
                                />
                                <Button colorScheme="green" onClick={applyRemoteSignal}>
                                    Connect
                                </Button>
                            </>
                        )}
                    </>
                ) : (
                    <Text color="green.500">Connected to peer!</Text>
                )}
            </VStack>

            {/* Persistent Chat Window */}
            <ChatWindow
                messages={messages}
                onSendMessage={(message) => sendMessage(message)}
            />
        </Box>
    );
};

export default MainApplication;
